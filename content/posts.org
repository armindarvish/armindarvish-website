#+OPTIONS: author: nil
#+HUGO_BASE_DIR: ../
#+HUGO_SECTION: ./
#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_lastMod: t
#+hugo_front_matter_format: yaml

* en
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: en
:END:
** posts
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: post
:END:
*** PUBLISH Humble Beginnings                  :@software:@webdesign:@about:
CLOSED: [2023-02-09 Thu 11:49]
:PROPERTIES:
:EXPORT_HUGO_DRAFT: false
:EXPORT_HUGO_SECTION_FRAG: humble_beginnings
:EXPORT_FILE_NAME: index
:TITLE: Humble Beginnings
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle About this Website and Blog
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :summary The totally necessary "about this blog..." post to introduce this website and blog
:END:

#+begin_src yaml :front_matter_extra t
authors:
  - admin
projects: ["software"]
featured: false
commentable: true
image:
  caption: 'This art was generated by AI and /\\r|\\\\/|i|\\\\|'
  focal_point: 'center'
#+end_src
**** *TLDR*
I recently decided to redesign and revive my old website and in the process, I decided that I would like to make a habit of writing blog posts here on my own websites. I'll likely be covering a range of topics mostly around research especially in healthcare technology. I'll also share my experience with software tools and workflows for example "How I am using emacs and ox-hugo to write this post" or "using NLP and python to extract interesting information from patents" and ...

**** *How it all started*
I first started working on this website back in 2013. At the time, I was a PhD student at Drexel University working on solid-state nanopores biosensors. I wanted to make a website to showcase my research portfolio and interests and in the process learn more about web design, HTML and CSS as well. I figured I could host it on Drexel's personal web pages and that's how this project simply started. After some initial research, I thought it would be nice to make the website script-free (only HTML and CSS) and only use my own work meaning that everything from design elements (logos, buttons, etc.) to HTML blocks had to be my own creation and not someone else's work[fn:mywork]! The first draft of the design was ready in a few days, but design and coding took some time especially because I had to learn CSS from scratch and my design was tricky to implement because I had hexagons and diagonal borders (see this [[https://archive.armindarvish.com/research.html][link]] for example) which was not straightforward, especially with HTML and CSS only. The first version was published later in 2014 and soon after I added a skeleton for my native-speaking language, Farsi. However, in the meanwhile I got very busy with my PhD research and keeping everything up to date with two languages was simply more work than I anticipated, so the progress slowed down. I then graduated in the middle of 2016 and moved to Northern California to work for a small start-up, where I found myself spending an average of 12–14 hours a day at work[fn:longwork]. That left me with no time to work on any personal projects including this website. You can see the old design in [[https://archive.armindarvish.com/][archive]].

**** *A New Beginning*
The project was abandoned for years with no updates while I was working for start-up companies in Silicon Valley. Then in 2019, I decided to leave the start-up scene and its ridiculously long working hours for greener pastures in a bigger, more stable company with more humane hours, and once again I found some time to consider personal projects and decided to bring this website back alive. The idea was further reinforced by the fact that the hosting server I was using was shut down by Drexel University. I decided it would be better to use a whole new set of tool chain, since the old website with HTML and CSS was not easy to maintain, plus the fact that this was again a good opportunity to learn new tools and skills. After some brief research I decided that I want to use [[https://gohugo.io/][Hugo]] combined with [[https://www.github.com/][GitHub]] and [[https://www.netlify.com/][Netlify]][fn:Netlify], and after some more browsing, looking at other people's examples (e.g. [[https://www.aidanscannell.com/][Aidan Scannell's Page]]), and reading online instructions (like [[https://www.dsquintana.blog/create-an-academic-website-free-easy-2020/][this one]]), I decided to give [[https://academic-demo.netlify.app/]["Academic Theme"]] from [[https://wowchemy.com/][wowchemy]] a try and the result is what you are looking at.

**** *Going Forward*
CLOSED: [2023-02-09 Thu 11:47]
:PROPERTIES:
:EXPORT_HUGO_DRAFT: false
:END:
Using Hugo and Netlify, made it really easy to update my website in more than one language as well. In fact it is easy enough to update that I have decided I can keep a blog here. In the past I have written scattered notes here and there on different social media platforms but going forward I'd like to keep everything here on my own website. My new goal in this project is to make a habit of writing short posts on interesting topics and build a collection of thought, ideas, tutorials over time. I will likely write about various topics I am interested in like biotech, nanosensors, and healthcare technology.  In addition, I will be writing posts on some software tools like interesting work flows in emacs including the one I am using to make this very post right now or how to use midjourney to make interesting backgrounds for your website, or using python and NLP to extract detailed technical information from Google Patents, and ...

While this is going to be a multilinqual blog, not all posts will be available in all languages.  My thoughts, experiences and perhaps even my personality is not always identical in environments with different languages, and therefore, the contents of my posts will reflect that reality. 


*** DRAFT If ChatGPT can get a Wharton's MBA, why should you? :@software:@AI:chatGPT: 
:PROPERTIES:
:EXPORT_HUGO_DRAFT: true
:EXPORT_HUGO_SECTION_FRAG: chatGPT_MBA
:EXPORT_FILE_NAME: index
:TITLE: If ChatGPT can get a Wharton's MBA, why should you?
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle 
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :summary 
:END:

*** DRAFT Why scientists need a website?            :@software:@scientists:web:
:PROPERTIES:
 :EXPORT_HUGO_DRAFT: true
 :EXPORT_HUGO_SECTION_FRAG: why_scientists_need_a_web
 :EXPORT_FILE_NAME: index
 :TITLE: Why Scientists Need a Website
 :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle 
 :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :summary 
:END:

#+begin_src yaml :front_matter_extra t
authors:
  - admin
projects: []
featured: false
commentable: true
image:
  caption: 'caption'
  focal_point: 'center'
#+end_src


*** DRAFT ChatGPT to the rescue
:PROPERTIES:
 :EXPORT_HUGO_DRAFT: true
 :EXPORT_HUGO_SECTION_FRAG: ChatGPT to the rescue
 :EXPORT_FILE_NAME: index
 :TITLE: ChatGPT to the rescue
 :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle
 :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :summary 
:END:

#+begin_src yaml :front_matter_extra t
authors:
  - admin
projects: [software, AI]
featured: true
commentable: true
image:
  caption: 'caption'
  focal_point: 'center'
#+end_src

Do you ever find yourself buried in documents you have to read? As a scientist, I am always struggling with staying up to date with the field. Back in Grad School days, I could easily stay up-to-date by following the relevant research in my field. There were perhaps a handful of labs that were working on directly relevant projects and a handful more that were working on related but not directly relevant ideas. So setting up some alerts on PubMed and Google Scholar was more-or-less enough to keep up with all the latest news in the field. But then I left Academia and started working as a scientist in the industry. There, I have to keep up with more than just a few academic labs. Unlike Academia, where I could focus on a single project and a handful of experimental techniques or  applications, etc., in the industry I have to know about every possible way a competitor can achieve what we are researching. I also need to understand how changes in the business or legal landscape will affect our project. Therefore, I have all sorts of alerts and rss-feeds not just to find the latest academic papers but also patents, news articles, business reports, etc. The problem is, this usually means hundreds of new feeds show up on my list every day and just going through them and figuring out which ones are relevant is hard. Of course you might be thinking that an AI-enabled article-suggestion or sorting would be the answer.
However, there are two general problems with the generic recommender systems, whether it is google news or some feed management apps:

1- They tend to learn about you as a person, but do not know how to separate different aspects of you effectively. For example, my google news recommendation is filled with all sort of things from news that I read about my home country Iran, to personal interests, to hobbies, to recent searches I have done on google,... But, that is essentially useless if i am looking for relevant topics to my project at work. What I need instead is a recommender system that is containerized and knows how to find relevant information and puts them  in their own basket instead of creating a big mish mash of everything.

2- The second problem is that these recommender systems are often not good at finding high-quality technical information. For example, I can subscribe to a topic I am interested in on Google news but that would then mean I will see all sorts of general nonesense that can show up anywhere in the news. As scientist this is completely useless. On the other hand, I can subscribe to email alerts on pubmed, or journal websites to get alerts about new academic papers, but the problem is there are so many of those sources and each have a different interface, etc. Plus the fact that lots of important information about business landscape and legal landscape do not show up in academic papers for a t least a few years. A good recommender system should be able to feed me with the most important technical publications (papers, patents, ...) as well as the latest news articles, discussions,...


Of course this not something new. There is a reason there are all sorts of physical and virtual networks for professionals. I happen to follow many forums on twitter, read blogs on topics relevant to my work, ...


social 
what I really need is two things:
1- A recommender that is containerized. For example, it only focuses on topics related to work during work hours, or can efficiently categorize new information into different projects.
2- A recommender that knows how to filter all the noise
Can you write an article about using chatGPT to summarize patent claims?
n etc.

So, with the recent hypes about chatGPT, I figured it is worth giving it 

to find the latest development

changes
The field of interest has broaden significantly because

relevant ad School, I could  behind with catching up with the l and and little time to do it?
Reading patents, digesting and summarizing them can be a daunting tasks. I have alerts set to notify me when new patents or patent applications are published online in my field of research and I review them every week, but with the pace of today's development and the sheer number of new research papers and patents, keeping up with the information is becoming more and more challenging. Recently I decided to ask ChatGPT to summarize some patent claims for me and the result is amazing. Here are some screen shots:

For example, there is this long patent from Oxford Nanopores that is very long and has 62 claims in the international version. Like a lot of other patent documents, it's hard to read.

So, I commited the sin and asked chatGPT to describe it to me in lay language, and here is the results:

"This is a patent application for a method of forming an array of membranes composed of amphipathic molecules. The method involves providing an apparatus that contains an array of compartments with openings for introducing polar medium, and disposing polar medium and apolar medium onto the support to create volumes of polar medium within each compartment. A layer of apolar medium is then provided across the openings in the support to prevent the volumes of polar medium in neighbouring compartments from coming into contact with each other. Polar medium is then flowed across the openings to displace the apolar medium and form a layer of polar medium that contacts the volumes of polar medium in the compartments. This results in the formation of membranes composed of amphipathic molecules at the interfaces between the layer of polar medium and the volumes of polar medium in the compartments. Various additional steps may be included, such as injecting polar medium into each compartment, pre-treating the support with apolar medium, and forming an emulsion of polar medium in apolar medium to introduce the polar medium into the compartments. The support may include partitions with gaps that allow the flow of apolar medium between the compartments, and the volumes of polar medium may form meniscuses across the inner recesses and outer portions of the partitions. Overall, this method provides a way to form arrays of membranes for various applications, such as in sensors and diagnostics."

As you can see the essence of the claims are captured in a short paragraph that is easy to read. With a little bit of automation, I can now have chatGPT read a list of patents and generate short summaries that I can then review and decide if i need to spend time to go over the details!

***** extras
ChatGPT is a powerful artificial intelligence tool that can be used to efficiently summarize patent claims. Patent claims are a set of statements that define the scope of a patent, and they are often lengthy and complex. Summarizing these claims can be time-consuming and tedious, but with the help of ChatGPT, the process can be streamlined and simplified.

The first step in using ChatGPT to summarize patent claims is to input the text into the tool. This can be done by either copying and pasting the text or uploading a file containing the claims. Once the text is inputted into ChatGPT, the tool uses machine learning algorithms to analyze the language and extract the key points of the claims.

One of the benefits of using ChatGPT is that it can summarize the claims in a concise and readable format. This makes it easier for patent examiners or lawyers to understand the scope of the patent and determine its value. Additionally, ChatGPT can identify any ambiguities or inconsistencies in the claims, helping to ensure that they are clear and accurate.

Another advantage of using ChatGPT to summarize patent claims is that it can save time and resources. Traditionally, patent examiners or lawyers would need to manually read through and analyze the claims, which could take hours or even days. With ChatGPT, the process can be completed in a matter of minutes, freeing up valuable time for other tasks.

In conclusion, ChatGPT is a valuable tool for summarizing patent claims. Its ability to extract key points from lengthy and complex texts can save time and resources while ensuring that the claims are clear and accurate. It is a valuable tool for anyone who works with patents, from patent examiners to lawyers and entrepreneurs.


*** DRAFT testing my ai assistant
:PROPERTIES:
 :EXPORT_HUGO_DRAFT: true
 :EXPORT_HUGO_SECTION_FRAG: testing_my_ai_assistant
 :EXPORT_FILE_NAME: index
 :TITLE: testing_my_ai_assistant
 :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle
 :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :summary
 :header-args: jupyter-python :session mysession :kernel micromaster :exports both
:END:

#+begin_src yaml :front_matter_extra t
authors:
  - admin
projects: []
featured: false
commentable: true
image:
  caption: 'caption'
  focal_point: 'center'
#+end_src

**** Question
how do I do a rolling window cross-correlation to find common events in two time-series in python?

**** ChatGPT
You can use the =numpy.correlate()= function to perform cross-correlation between the two time series. To implement a rolling window, you can slice the two time series into overlapping segments, then perform the correlation on each segment. Here's an example code:

#+begin_src jupyter-python
import numpy as np
from scipy import signal as sig

def rolling_corr(x, y, window):
    # Calculate the length of the output array
    n = len(x) - window + 1
    # Initialize the output array
    out = np.empty(n)
    # Loop through each rolling window and compute the correlation
    for i in range(n):
        x_win = x[i:i+window]
        y_win = y[i:i+window]
        # out[i] = np.correlate(x_win, y_win, mode='valid')[0]
        out[i] = np.corrcoef(x_win, y_win)[0,1]
    # Return the output array
    return out

#+end_src

#+RESULTS:

In this function, =x= and =y= are the two time series, and window is the size of the rolling =window=. The function returns an array of length =n=, where =n= is the number of rolling =windows=. Each element of the array represents the correlation coefficient between the two time series for a given window.

To find common events, you can define a threshold for the correlation coefficient and identify the segments where the coefficient exceeds the threshold.
**** Question

Can you write some code to plot the time series in the previous code for me to visually see the effect
Assistant:

**** ChatGPt
Sure! Here's some code that generates two example time series and plots them along with the cross-correlation:


#+begin_src jupyter-python :results none :file "./en/post/testing_my_ai_assistant/featured.png"
import matplotlib.pyplot as plt
import mplcyberpunk

# plt.style.use("mywebsite-dark")
plt.style.use("mycyberpunk")

# Generate example time series
t = np.arange(0, 10, 0.1)
x = np.sin(t*2) + np.random.normal(scale=0.1, size=len(t))
# y = np.sin(t*1.1 + 0.5) + np.random.normal(scale=0.1, size=len(t))
y = np.sin(t*4-np.pi/2) + np.random.normal(scale=0.1, size=len(t))
# y = -x
x_n= (x - np.mean(x))/(np.std(x))
y_n= (y - np.mean(y))/(np.std(y))
# Calculate rolling cross-correlation with window size 50
corr = rolling_corr(x_n, y_n, 50)

sel = np.where(corr<-0.1)
# Plot time series and cross-correlation
fig, ax = plt.subplots(ncols=2, figsize=(12,4))
ax[0].plot(t, x, label='x')
ax[0].plot(t, y, label='y')
ax[0].set_xlabel('Time')
ax[0].set_ylabel('Value')
ax[0].legend()

ax[1].plot(t[:len(corr)], corr)
ax[1].plot(t[sel], corr[sel], "ro")
ax[1].set_xlabel('Time lag')
ax[1].set_ylabel('Cross-correlation')
ax[1].axhline(0.5, color='red', linestyle='--')
ax[1].axhline(-0.5, color='red', linestyle='--')

plt.show()

#+end_src
[[file:featured.png]]

Here, we generate two time series with a similar waveform but slightly different frequencies, and add some random noise to each of them. We then calculate the rolling cross-correlation using a window size of 50, and plot the two time series and the cross-correlation side-by-side. The dashed red lines show the threshold for the correlation coefficient.

You can modify the example code to use your own time series data and parameters.

*** PUBLISH Emacs Workflow: Dynamically Adding Files to *org-agenda-files*
CLOSED: [2023-05-21 Sun 20:46]
:PROPERTIES:
:EXPORT_HUGO_DRAFT: false
:EXPORT_HUGO_SECTION_FRAG: Emacs_Workflow_Dynamically_Adding_files_to_org-agenda-Files
:EXPORT_FILE_NAME: index
:TITLE: dynamically adding files to org-agenda-files in Emacs
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle How to automatically and dynamically build org-agenda-files to include any files with TODO items.
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :summary In this post, I'll show you my workflow for automatically adding files with TODO items to org-agenda-files as soon as we open or save the file.
:END:

#+begin_src yaml :front_matter_extra t
authors:
  - admin
projects: [software]
featured: false
commentable: true
image:
  caption:
  focal_point: 'center'
  #+end_src


**** Intro

If you use Emacs org-mode for task management, you have probably wondered if there is a way to dynamically add files with TODO items to org-agenda-files. A Google search will likely get you some initial ideas on how to do it. For example this post: [[https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html][Boris Buliga - Task management with org-roam Vol. 5: Dynamic and fast agenda]] covers how to this. But since Boris's post focuses on using org-roam, it may not be the right solution when you use org-roam. So I had to hack my own solution and in this point I'm going to share that with you in case anyone is interested. You can see a [[file:en/post/Emacs_Workflow_Dynamically_Adding_files_to_org-agenda-Files/dynamic_org_agenda.gif][screenshot]] below.


**** How does it work

For the main functionalities, I am using [[https://orgmode.org/worg/dev/org-element-api.html][Org Element API]] to parse org-mode buffers and find org TODO items. If there is a =TODO= item in the buffer, and it is visiting a file, I add the file to =org-agenda-files=. Additionally, I make sure that =org-agenda-files= is remembered between different Emacs sessions, I add =org-agenda-files= to =savehist-additional-variables=.

Then I define custom functions for and add them as hooks to org-mode to update =org-agenda-files= when an org-mode file is opened as well as when an org-mode file is saved. The redundancy helps make sure that nothing is lost if there is a crash.


**** The code

- Check if the file contains a =TODO= item:

 Use =org-element-map= and =org-element-parse-buffer= to walk the buffer, find all headlines and return true if there is any headline that is a =TODO= item.

#+begin_src emacs-lisp
(defun ad/agenda-file-p ()
    (org-element-map
       (org-element-parse-buffer 'headline)
       'headline
     (lambda (h)
       (eq (org-element-property :todo-type h)
           'todo))
     nil 'first-match))
#+end_src

- make a custom function to update =org-agenda-files= if the current org-mode file contains a =TODO= item:

If the current buffer contains a =TODO= item, I use seq-difference to find out if the files are already in org-agenda-files. If it does not contain =TODO= item, I make sure to remove it from =org-agenda-files=. This is important because when I'm done with a =TODO= item and remove it from the file, I would want the file to be removed from =org-agenda-files=.

#+begin_src emacs-lisp
(defun ad/org-agenda-update-files (&rest ARG)
  ;; check if this is an org file buffer
  (interactive)
    (when (and (derived-mode-p 'org-mode) (buffer-file-name))
      (message "updating org-agenda-files...")
      ;; if there is an active TODO task, add this file to agenda files
      (if (ad/agenda-file-p)
      (add-to-list 'org-agenda-files (file-truename (buffer-file-name)))
      ;; if there is no active TODO task, remove the file from agenda files if needed
      (setq org-agenda-files (seq-difference org-agenda-files (list (buffer-file-name))))
      (customize-save-variable 'org-agenda-files org-agenda-files)
      ))
      )

#+end_src

- cleaning up =org-agenda-files= and remove files that don't exist anymore.

When I delete some files, I want to make sure it gets removed from =org-agenda-files=.

#+begin_src emacs-lisp
(defun ad/org-agenda-cleanup-files (&rest ARG)
  (interactive)
  (let ((temp:org-agenda-files org-agenda-files))
  (dolist (file org-agenda-files)
  (if (not (file-exists-p file))
      (setq temp:org-agenda-files (seq-difference temp:org-agenda-files (list file))))
    ())
  (setq org-agenda-files temp:org-agenda-files))
  )
#+end_src

- Adding hooks

To get my functions to run automatically, I add =hooks= to =org-mode=. I make =lambda= functions that are added as hooks to =find-file-hook= and =before-save-hook= to make sure that =org-agenda-files= gets updated whenever I open an org-mode file and then again when I save the file.

#+begin_src emacs-lisp
(require 'ad-org)
;; add or remove individual file
(add-hook 'org-mode-hook (lambda () (add-hook 'find-file-hook #'my:org-agenda-update-files)))
(add-hook 'org-mode-hook (lambda () (add-hook 'before-save-hook #'my:org-agenda-update-files)))
#+end_src

- Adding advice to functions that use =org-agenda-files= to show =TODO= items.

Before I run =org-agenda= or =dashboard-get-agenda=, or any other function that reads =org-agenda-files= to show my =TODO= items, I need to make sure to remove non-existing files from =org-agenda-files=.

#+begin_src emacs-lisp
;; remove non-existing files before building agenda
(advice-add 'org-agenda :before #'my:org-agenda-cleanup-files)
(advice-add 'org-todo-list :before #'my:org-agenda-cleanup-files)
(advice-add 'dashboard-get-agenda :before #'my:org-agenda-cleanup-files)
#+end_src

- Make sure =org-agenda-files= is remembered between Emacs sessions.

I add =org-agenda-files= to =savehis-additional-variables= and make sure that =savehist-mode= is enabled.

#+begin_src emacs-lisp
(add-to-list 'savehist-additional-variables 'org-agenda-files)
#+end_src

**** screenshot

Here is a screenshot showing it in action. I open an org file and a =TODO= item in it and save it and as you can see once I refresh the buffer describing =org-agenda-files= variable, the new file is added to the list. I also show that once I remove the =TODO= item or mark it as DONE, it is automatically removed from the list. Also, you can see that once I have the new file in the org-agenda list, it automatically shows up on my dashboard.

#+ATTR_ORG: :width 800px :height nil px
#+ATTR_LATEX: :width 800px :height nil px
#+ATTR_HTML: :width 800px :height nil px
[[file:~/projects/armindarvish-website/content/en/post/Emacs_Workflow_Dynamically_Adding_files_to_org-agenda-Files/dynamics_org_agenda.gif]]

* fa
:PROPERTIES:
:EXPORT_LANGUAGE: Farsi
:EXPORT_HUGO_SECTION_FRAG: fa
:END:

** posts
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: post
:END:

*** PUBLISH شروعی ساده
CLOSED: [2023-02-09 Thu 12:01]
:PROPERTIES:
:EXPORT_HUGO_DRAFT: false
:EXPORT_HUGO_SECTION_FRAG: humble_beginnings
:EXPORT_FILE_NAME: index
:TITLE: شروعی ساده
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle در مورد وبسایت و وبلاگ 
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :summary «معرفی وبسایت»
:END:
#+begin_src yaml :front_matter_extra t
authors:
  - admin
projects: []
featured: false
commentable: true
image:
  caption: 'This is an art made by midjourney AI and Armin'
  focal_point: 'center'
categories: ["نرم افزار", "طراحی وب", "درباره"]
#+end_src

**** *در چند جمله*
من اخیراً تصمیم گرفتم وبسایت قدیمی خود را بازطراحی و احیا کنم و در ادامه تصمیم گرفتم که از این پس نوشته های پراکنده خود را به صورت پست های وبلاگی در همین وبسایت منتشر کنم. به احتمال زیاد موضوعات پستها طیف متنوعی خواهند داشت اما سعی میکنم بیشتر به حوزه تخصص خودم به ویژه تکنولوژی سلامت بپردازم. همچنین دوست دارم تجربیات خودم را در استفاده از ابزارهای نرم افزاری به اشتراک بگذارم، به عنوان مثال پستهایی مثل "چگونه از emacs و ox-hugo برای نوشتن وبلاگ استفاده کنیم" یا "استفاده از NLP و python برای استخراج اطلاعات فنی از گوگل پتنت" و ...

****  *چطور همه چی شروع شد*

من برای اولین بار در سال ۱۳۹۱ شروع به طراحی این وب سایت کردم. در آن زمان، من در دانشگاه درکسل در آمریکا دانشجوی دکترا بودم و در حوزه نانوحفره های مصنوعی به عنوان حسگرهای زیستی مشغول به مطالعه و تحقیق. من می‌خواستم وبسایتی بسازم تا مجموعه تحقیقات و علایقم را به نمایش بگذارم و در این فرآیند درباره طراحی وب، «HTML» و «CSS» نیز اطلاعات بیشتری کسب کنم. وقتی متوجه شدم که می‌توانم وبسایت خود را در فضای صفحه وب شخصی دانشگاه درکسل میزبانی کنم، این پروژه به سادگی شروع شد. پس از تحقیقات اولیه، فکر کردم خوب است که وب سایت را بدون اسکریپت (یعنی فقط با «HTML» و «CSS») طراحی کنم و در عین حال فقط از کار خودم استفاده کنم به این معنی که همه چیز از عناصر طراحی (لوگوها، دکمه ها و غیره) تا بلوک های «HTML» ساخته خودم باشد و نه کار شخص دیگری [fn:کارخودم]! اولین پیش نویس طرح در چند روز آماده شد، اما طراحی و کدنویسی کمی طول کشید، به خصوص به این دلیل که باید CSS را از ابتدا یاد می گرفتم و اجرای طرح اولیه ساده نبود، چرا که از شش ضلعی و حاشیه های مورب استفاده می کرد (برای مثال این [[https://archive.armindarvish.com/research.html][لینک]] ببینید) ، که به راحتی قابل اجرا نبود به خصوص اینکه فقط از «HTML» و «CSS» استفاده می کردم. اولین نسخه در سال ۱۳۹۲ منتشر شد و کمی پس از آن نسخه اولیه فارسی  را به وبسایت اضافه کردم. اما در همین حین، من درگیر تحقیقات دکترای خود شدم و به روز نگه داشتن وبسایت با دو زبان بیشتر از آنچه پیش بینی می کردم وقت میبرد، بنابراین پیشرفت کار کند شد. سپس در اواسط سال ۱۳۹۵ فارغ التحصیل شدم و به کالیفرنیای شمالی نقل مکان کردم تا برای یک شرکت کوچک و نوبنیان کار کنم،  جایی که روزانه به طور متوسط ​​بین ۱۲ تا ۱۴ ساعت وقت می‌گذاشتم [fn:کارزیاد].بنابراین دیگر فرصتی برای کار بر روی پروژه های شخصی از جمله این وب سایت نبود. این نسخه از وبسایت را میتوانید در این [[https://archive.armindarvish.com/index_fa.html][لینک آرشیو]] ببینید.

**** *شروعی تازه*

این پروژه پس از آن برای چند سال بدون به‌روزرسانی رها شد تا اینکه من نهایتاً در سال ۱۳۹۸، تصمیم گرفتم شرکتهای نوپا و ساعات کار طولانی آنها را ترک کنم و به یک شرکت بزرگتر و پایدارتر با ساعات کاری انسانی‌تری بپیوندم. در نتیجه یک بار دیگر این فرصت به وجود آمد که به کار بر روی پروژه های شخصی از جمله این وب سایت بپردازم.  یک بار دیگر فرصتی برای بررسی پروژه‌های شخصی پیدا کردم و تصمیم گرفتم این وبسایت را احیا کنم. ایده احیای وبسایت با این واقعیت که دانشگاه درکسل تصمیم گرفت سروری را که میزبان وبسایت اصلی من بود خاموش کند تقویت شد.در ادامه تصمیم گرفتم که از یک زنجیره ابزار جدید استفاده کنم، زیرا نگهداری وب سایت قدیمی با «HTML» و «CSS» آسان نبود، به علاوه این فرصت خوبی بود برای اینکه دوباره ابزار و مهارت های جدیدی را یاد بگیرم. بعد از کمی تحقیق، تصمیم گرفتم که از[[https://gohugo.io/][«Hugo»]]، به همراه [[https://www.github.com/][«GitHub»]] و [[https://www.netlify.com/][«Netlify»]] استفاده کنم، و بعد از دیدن نمونه های مشابه (مثل این [[https://www.aidanscannell.com/][صفحه]]) و توصیه ها و راهنماهای آنلاین (مثل [[https://www.dsquintana.blog/create-an-academic-website-free-easy-2020/][اینجا]])، تصمیم گرفتم از طرح [[https://academic-demo.netlify.app/][«Academic»]]  از [[https://wowchemy.com/][«wowchemy»]] استفاده کنم و نتیجه همین شد که میبینید.

**** *پس از این*

با استفاده از زنجیره ابزار جدید، به روز رسانی این وب سایت بسیار آسانتر شد. در واقع به روزرسانی آنقدر آسان شد که تصمیم گرفتم می توانم یک وبلاگ هم به این پروژه اضافه کنم. پیش اط این من یادداشت‌های پراکنده‌ای را اینجا و آنجا در پلتفرم‌های رسانه‌های اجتماعی مختلف منتشر کرده بودم، اما اکنون می‌خواهم همه چیز را اینجا در وب‌سایت خودم نگه دارم. هدف جدید من در این پروژه این است که عادت کنم به نوشتن پست های کوتاه در مورد موضوعات جالب و ساخت مجموعه ای از افکار، ایده ها، یادداشتها و دستورالعملهایی که به مرور جمع آوری میکنم. احتمالاً در مورد موضوعات مختلفی که به آنها علاقه دارم مانند بیوتکنولوژی، نانوحسگرها و تکنولوژی سلامت خواهم نوشت. همچنین دوست دارم که تجربه خودم از استفاده از  ابزارهای نرم افزاری مانند استفاده از «emacs» مثلاً برای ایجاد همین پست و یا نحوه استفاده از «midjourney» برای ایجاد پس زمینه های جالب برای وب سایت خود، یا استفاده از «python» و «NLP» برای استخراج اطلاعات فنی از پتنت های گوگل و ... بنویسم.

در حالی که این یک وبلاگ چند زبانه خواهد بود، همه پست ها به همه زبان ها در دسترس نخواهند بود و نوشته های فارسی لزوماً ترجمه نوشته های انگلیسی نیست. افکار، تجربیات و شاید حتی شخصیت من در محیط هایی با زبان های مختلف یکسان نیست و بنابراین، مطالب پست های من نیز انعکاس این تجربیات خواهند بود.



*** DRAFT چرا پژوهشگران نیاز به وبسایت دارند؟
:PROPERTIES:
 :EXPORT_HUGO_DRAFT: true
 :EXPORT_HUGO_SECTION_FRAG: why_scientists_need_a_web
 :EXPORT_FILE_NAME: index
 :TITLE: Why Scientists Need a Website
 :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle 
 :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :summary 
:END:

#+begin_src yaml :front_matter_extra t
authors:
  - admin
projects: []
featured: false
commentable: true
image:
  caption: 'caption'
  focal_point: 'center'
categories: []
#+end_src

* Footnote
* COMMENT Local Variables                          :ARCHIVE:

# Local Variables:
# eval: (org-hugo-auto-export-mode t)
# End:







* Footnotes
[fn:mywork] The only exception was the map widget

[fn:کارخودم] البته به جز بعضی المانهای خاص مثل نقشه!

[fn:کارزیاد]توصیه میکنم که این حد از کار را به هیچ عنوان تجربه نکنید چون برای جسم و مغز و روح و روانتون مضره!

[fn:Netlify]Note to self: write another post about choice of tools and how to build a website with hugo, github and netlify! 

[fn:longwork] I Don't suggest trying that yourself. It's not good for your physical or mental health!


#+begin_src emacs-lisp
(org-element-map (org-element-parse-buffer) 'headline
          (lambda (hl)
            (when (string-equal (org-element-property :raw-value hl) "Humble Beginnings")
              (org-element-map (org-element-contents hl) 'paragraph
              (lambda (paragraph)
                (insert paragraph)
              )))))



#+end_src
